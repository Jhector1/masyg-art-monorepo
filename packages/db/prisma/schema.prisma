generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String              @id @default(uuid())
  categoryId        String
  title             String
  description       String
  price             Float
  thumbnails        String[]
  formats           String[]
  createdAt         DateTime            @default(now())
  svgFormat         String?
  svgPreview        String?
  sizes             String[]
  saleEndsAt        DateTime?
  salePercent       Int?
  salePrice         Float?
  saleStartsAt      DateTime?
  publicId          String
  cartItems         CartItem[]
  DesignEntitlement DesignEntitlement[]
  DesignUsage       DesignUsage[]
  favorites         Favorite[]
  orderItems        OrderItem[]
  category          Category            @relation(fields: [categoryId], references: [id])
  assets            ProductAsset[]
  variants          ProductVariant[]
  purchasedDesigns  PurchasedDesign[]   @relation("Product_PurchasedDesigns")
  reviews           Review[]
  designs           UserDesign[]

  @@index([saleStartsAt, saleEndsAt])
  @@index([saleEndsAt])
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  avatarUrl         String?             @db.VarChar(255)
  downloadCount     Int                 @default(0)
  emailVerified     DateTime?
  image             String?
  avatarPublicId    String?             @db.VarChar(191)
  isAdmin           Boolean             @default(false)
  accounts          Account[]
  addresses         Address[]
  cart              Cart?
  DesignEntitlement DesignEntitlement[]
  downloadTokens    DownloadToken[]
  favorites         Favorite[]
  orders            Order[]
  purchasedDesigns  PurchasedDesign[]   @relation("User_PurchasedDesigns")
  reviews           Review[]
  sessions          Session[]
  designs           UserDesign[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Categorization
model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model ProductVariant {
  id                   String           @id @default(cuid())
  productId            String
  type                 VariantType?
  format               String?
  size                 String?
  material             String?
  frame                String?
  license              String?
  depthIn              Float?
  framed               Boolean?         @default(false)
  heightIn             Float?
  inventory            Int?             @default(1)
  listPrice            Float?
  medium               String?
  originalSerial       String?          @unique
  sku                  String?          @unique
  soldAt               DateTime?
  status               InventoryStatus? @default(ACTIVE)
  surface              String?
  weightLb             Float?
  widthIn              Float?
  year                 Int?
  uploadType           VariantType?
  CartItemsAsDigital   CartItem[]       @relation("CartItemDigital")
  CartItemsAsOriginal  CartItem[]       @relation("CartItemOriginal")
  CartItemsAsPrint     CartItem[]       @relation("CartItemPrint")
  OrderItemsAsDigital  OrderItem[]      @relation("OrderItemDigital")
  OrderItemsAsOriginal OrderItem[]      @relation("OrderItemOriginal")
  OrderItemsAsPrint    OrderItem[]      @relation("OrderItemPrint")
  product              Product          @relation(fields: [productId], references: [id])
}

/// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  guestId   String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([guestId])
}

model CartItem {
  id                 String          @id @default(cuid())
  cartId             String
  productId          String
  digitalVariantId   String?
  printVariantId     String?
  price              Float
  quantity           Int             @default(1)
  addedAt            DateTime        @default(now())
  designId           String?
  previewUrlSnapshot String?         @db.VarChar(2000)
  styleSnapshot      Json?
  originalPrice      Float
  originalVariantId  String?
  cart               Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  design             UserDesign?     @relation(fields: [designId], references: [id])
  digitalVariant     ProductVariant? @relation("CartItemDigital", fields: [digitalVariantId], references: [id])
  originalVariant    ProductVariant? @relation("CartItemOriginal", fields: [originalVariantId], references: [id])
  printVariant       ProductVariant? @relation("CartItemPrint", fields: [printVariantId], references: [id])
  product            Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([designId])
  @@index([cartId])
  @@index([originalVariantId])
}

/// Favorites / Wishlist
model Favorite {
  id        String   @id @default(cuid())
  userId    String?
  productId String
  createdAt DateTime @default(now())
  guestId   String?
  product   Product  @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@unique([guestId, productId])
}

/// Product Reviews
model Review {
  id        String   @id @default(cuid())
  userId    String?
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  guestId   String?
  product   Product  @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([guestId])
}

/// Orders & Payments
model Order {
  id                  String            @id @default(cuid())
  userId              String?
  total               Float
  status              String            @default("PENDING")
  placedAt            DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  shippingId          String?
  stripeSessionId     String?           @unique
  guestId             String?
  claimTokenExpiresAt DateTime?
  claimTokenHash      String?           @unique
  downloadTokens      DownloadToken[]
  shipping            Address?          @relation("Order_shipping", fields: [shippingId], references: [id])
  user                User?             @relation(fields: [userId], references: [id])
  items               OrderItem[]
  payment             Payment?
  purchasedDesigns    PurchasedDesign[] @relation("Order_PurchasedDesigns")

  @@index([guestId])
  @@index([claimTokenExpiresAt])
}

model OrderItem {
  id                 String           @id @default(cuid())
  orderId            String
  productId          String
  digitalVariantId   String?
  printVariantId     String?
  type               VariantType
  price              Float
  quantity           Int              @default(1)
  previewUrlSnapshot String?
  listPrice          Float?
  originalVariantId  String?
  downloadTokens     DownloadToken[]
  digitalVariant     ProductVariant?  @relation("OrderItemDigital", fields: [digitalVariantId], references: [id])
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  originalVariant    ProductVariant?  @relation("OrderItemOriginal", fields: [originalVariantId], references: [id])
  printVariant       ProductVariant?  @relation("OrderItemPrint", fields: [printVariantId], references: [id])
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchasedDesign    PurchasedDesign? @relation("OrderItem_PurchasedDesign")

  @@index([orderId])
  @@index([originalVariantId])
}

/// Addresses (User & Shipping)
model Address {
  id         String   @id @default(cuid())
  userId     String?
  label      String?
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  guestId    String?
  user       User?    @relation(fields: [userId], references: [id])
  orders     Order[]  @relation("Order_shipping")

  @@index([guestId])
}

/// Payment Records
model Payment {
  id            String   @id @default(cuid())
  orderId       String   @unique
  amount        Float
  provider      String
  transactionId String
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
}

model ProductAsset {
  id             String           @id @default(cuid())
  productId      String
  storageKey     String?          @unique
  url            String
  previewUrl     String?
  mimeType       String
  ext            String
  isVector       Boolean          @default(false)
  width          Int?
  height         Int?
  dpi            Int?
  colorProfile   String?
  sizeBytes      Int?
  checksum       String?
  pdfPageCount   Int?
  pdfPageWIn     Float?
  pdfPageHIn     Float?
  svgViewBox     String?
  hasAlpha       Boolean?
  isAnimated     Boolean?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deliveryType   CldDeliveryType?
  resourceType   CldResourceType?
  downloadTokens DownloadToken[]
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, url], name: "productId_url")
  @@index([productId])
  @@index([url])
}

model DownloadToken {
  id               String       @id @default(cuid())
  orderId          String
  assetId          String
  orderItemId      String?
  userId           String?
  guestId          String?
  signedUrl        String
  expiresAt        DateTime
  remainingUses    Int?
  downloadCount    Int          @default(0)
  lastDownloadedAt DateTime?
  licenseSnapshot  String?
  createdAt        DateTime     @default(now())
  asset            ProductAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  order            Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem        OrderItem?   @relation(fields: [orderItemId], references: [id])
  user             User?        @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([assetId])
  @@index([guestId])
  @@index([orderId, assetId])
}

/// Per-user, per-product editable design + quotas
model UserDesign {
  id                String              @id @default(cuid())
  userId            String?
  guestId           String?
  productId         String
  style             Json
  defs              Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  previewUpdatedAt  DateTime?
  previewUrl        String?             @db.VarChar(2000)
  previewPublicId   String?             @db.VarChar(255)
  CartItem          CartItem[]
  DesignEntitlement DesignEntitlement[]
  DesignUsage       DesignUsage[]
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([guestId, productId])
  @@index([userId])
  @@index([guestId])
  @@index([productId])
}

model WebhookEvent {
  id        String   @id
  createdAt DateTime @default(now())
}

model PurchasedDesign {
  id                String              @id @default(cuid())
  userId            String?
  guestId           String?
  orderId           String
  orderItemId       String              @unique
  productId         String
  style             Json
  defs              Json?
  previewUrl        String?
  createdAt         DateTime            @default(now())
  svg               Json?
  DesignEntitlement DesignEntitlement[]
  order             Order               @relation("Order_PurchasedDesigns", fields: [orderId], references: [id], onDelete: Cascade)
  orderItem         OrderItem           @relation("OrderItem_PurchasedDesign", fields: [orderItemId], references: [id], onDelete: Cascade)
  product           Product             @relation("Product_PurchasedDesigns", fields: [productId], references: [id], onDelete: Cascade)
  user              User?               @relation("User_PurchasedDesigns", fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([orderId])
}

model DesignEntitlement {
  id                String            @id @default(cuid())
  userId            String?
  guestId           String?
  productId         String
  userDesignId      String?
  purchasedDesignId String?
  source            EntitlementSource
  orderId           String?
  orderItemId       String?
  exportQuota       Int               @default(0)
  editQuota         Int               @default(0)
  exportsUsed       Int               @default(0)
  editsUsed         Int               @default(0)
  expiresAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchasedDesign   PurchasedDesign?  @relation(fields: [purchasedDesignId], references: [id])
  userDesign        UserDesign?       @relation(fields: [userDesignId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
  DesignUsage       DesignUsage[]

  @@index([userId])
  @@index([guestId])
  @@index([productId])
  @@index([userDesignId])
  @@index([purchasedDesignId])
  @@index([orderItemId])
}

model DesignUsage {
  id                String            @id @default(cuid())
  kind              UsageKind
  userId            String?
  guestId           String?
  productId         String
  userDesignId      String?
  purchasedDesignId String?
  entitlementId     String
  format            String?
  width             Int?
  height            Int?
  meta              Json?
  idempotencyKey    String?           @unique
  createdAt         DateTime          @default(now())
  entitlement       DesignEntitlement @relation(fields: [entitlementId], references: [id], onDelete: Cascade)
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  userDesign        UserDesign?       @relation(fields: [userDesignId], references: [id])

  @@index([entitlementId])
  @@index([userId])
  @@index([guestId])
  @@index([productId])
}

enum InventoryStatus {
  ACTIVE
  RESERVED
  SOLD
}

enum VariantType {
  DIGITAL
  PRINT
  ORIGINAL
}

enum CldResourceType {
  image
  raw
  video
}

enum CldDeliveryType {
  upload
  authenticated
  private
}

enum EntitlementSource {
  PURCHASE
  TOPUP
  GRANT
}

enum UsageKind {
  EXPORT
  EDIT
}
